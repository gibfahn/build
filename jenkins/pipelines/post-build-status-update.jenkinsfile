#!/usr/bin/env groovy

// DESCRIPTION:
// Updates the status of a GitHub pull request via the Github Bot. Primarily
// used for node-test-commit-* sub builds.

import groovy.json.JsonOutput

pipeline {
    agent { label 'jenkins-workspace' }

    parameters {
        string(name: 'REPO', defaultValue: 'node', description: 'GitHub repository')
        string(name: 'IDENTIFIER', defaultValue: '', description: 'test/aix, linter, etc.')
        string(name: 'STATUS, 'defaultValue: '', description: 'pending, success, unstable, failure')
        string(name: 'URL, 'defaultValue: '', description: 'URL for upstream Jenkins job')
        string(name: 'COMMIT, 'defaultValue: '', description: 'Current commit being tested in upstream Jenkins job')
        string(name: 'REF, 'defaultValue: '', description: 'Current branch being tested in upstream Jenkins job')
        booleanParam(name: 'POST_STATUS_TO_PR', defaultValue: 'false', description: 'Whether the PR should be updated.')
    }

    stages {
        stage('Send status report') {
            steps {
                sendBuildStatus(params)
            }
        }
    }
}

def sendBuildStatus(params) {
    // Fail loudly if upstream job is configured wrong.
    if (params.any{ it.value == '' }) {
        error('All parameter fields are required.')
    }

    // Fail quietly if upstream job shouldn't be posting to GitHub.
    if (!params.REF.contains('refs/pull/') || params.POST_STATUS_TO_PR != 'true') {
        println "Skipping status update (REF: ${params.REF}, " +
            "POST_STATUS_TO_PR: ${params.POST_STATUS_TO_PR})."
        return
    }

    def path = ""
    def message = ""

    def status = params.STATUS
    if (status == "pending") {
        path = "start"
        message = "running tests"
    } else if (status == "failure") {
        path = "end"
        message = "tests failed"
    } else if (status == "unstable") {
        path = "end"
        message = "flaky tests failed"
        status = "success"
    } else if (status == "success") {
        path = "end"
        message = "tests passed"
    }

    def buildPayload = JsonOutput.toJson([
        'identifier': params.IDENTIFIER,
        'status': params.STATUS,
        'url': params.URL,
        'commit': params.COMMIT,
        'ref': params.REF,
        'message': message
        ])

    def script = "curl -s -o /dev/null --connect-timeout 5 -X POST " +
        "-H 'Content-Type: application/json' -d '${buildPayload}' " +
        "http://github-bot.nodejs.org:3333/${params.REPO}/jenkins/${path}"

    sh(returnStdout: true, script: script)
}
